https://leetcode.com/problems/rotting-oranges/
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int min = 0, became_rotten = 0,  fresh_oranges = 0;
        queue<pair<int, int>> rotten_oranges;
        bool fresh = false;
        int n = grid.size();
        int m = grid[0].size();
        //найдем индексы протухших апельсинов
        for (int i =0; i < n; i++) {
            for ( int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    rotten_oranges.push(make_pair(i,j));
                }
                else if (grid[i][j] == 1) {
                    fresh_oranges++;
                    fresh = true;
            }
        }
        }
        rotten_oranges.push(make_pair(-1,-1));
        if (fresh) {
            while (!rotten_oranges.empty()) {
                pair<int, int> cell;
                cell = rotten_oranges.front(); 
                rotten_oranges.pop();
                if (cell.first != -1) {
                if (cell.first+1<n && grid[cell.first+1][cell.second] == 1) {
                    became_rotten++;
                    grid[cell.first+1][cell.second] = 2;
                    rotten_oranges.push(make_pair(cell.first+1,cell.second));
                }
                if (cell.first-1>=0 && grid[cell.first-1][cell.second] == 1) {
                    became_rotten++;
                    grid[cell.first-1][cell.second] = 2;
                    rotten_oranges.push(make_pair(cell.first-1,cell.second));
                }
                if (cell.second+1<grid[cell.first].size() && grid[cell.first][cell.second+1] == 1) {
                    became_rotten++;
                    grid[cell.first][cell.second+1] = 2;
                    rotten_oranges.push(make_pair(cell.first,cell.second+1));
                }
                if (cell.second-1>=0 && grid[cell.first][cell.second-1] == 1) {
                    became_rotten++;
                    grid[cell.first][cell.second-1] = 2;
                    rotten_oranges.push(make_pair(cell.first,cell.second-1));
                }
                }
                else {
                    if(!rotten_oranges.empty()) {
                         min++;
                         rotten_oranges.push(make_pair(-1,-1));}
                }
            }
            }
        if(fresh_oranges ==  became_rotten)
          return min; 
        return -1;
        }
      
};
